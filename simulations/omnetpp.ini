[General]
network = Testbed
#sim-time-limit = 1s
sim-time-limit = 0.5s

### 
#
# This configuration was adapted from the original In-Vehicle Network simulation template file
# in inet/showcases/tsn/combiningfeatures/invehicle/ (using INET library).
#
###

#abstract-config = true (requires omnet 7)
description = "Zonal Filter Simulation Configuration"

########################
# Scenario Configuration

# disable local multicast loop
**.udp.defaultMulticastLoop = false

### NEW ### 

# --- cameras ---
*.*Cam.numApps = 1

# send: adas
*.*Cam.app[0].typename = "TypedUdpSourceApp"
*.*Cam.app[0].source.packetNameFormat = "%M->adas:ClassB-%c"
*.*Cam.app[0].source.packetLength = 1250B
*.*Cam.app[0].source.productionInterval = 250us
*.*Cam.app[0].io.destAddress = "adas"
*.frontLeftCam.app[0].io.destPort = 1000
*.frontLeftCam.app[0].tagger.type = "FL_CAM_IMAGE"
*.frontRightCam.app[0].io.destPort = 1001
*.frontRightCam.app[0].tagger.type = "FR_CAM_IMAGE"
*.rearLeftCam.app[0].io.destPort = 1002
*.rearLeftCam.app[0].tagger.type = "RL_CAM_IMAGE"
*.rearRightCam.app[0].io.destPort = 1003
*.rearRightCam.app[0].tagger.type = "RR_CAM_IMAGE"

# --- ultrasonics --- 
*.*Ultrasonic.numApps = 1

# send: head
*.*Ultrasonic.app[0].typename = "TypedUdpSourceApp"
*.*Ultrasonic.app[0].source.packetNameFormat = "%M->head:ClassB-%c"
*.*Ultrasonic.app[0].source.packetLength = 8B
*.*Ultrasonic.app[0].source.productionInterval = 250us
*.*Ultrasonic.app[0].io.destAddress = "head"
*.frontLeftUltrasonic.app[0].io.destPort = 1000
*.frontLeftUltrasonic.app[0].tagger.type = "FL_ULTRA_DIST"
*.frontRightUltrasonic.app[0].io.destPort = 1001
*.frontRightUltrasonic.app[0].tagger.type = "FR_ULTRA_DIST"
*.rearLeftUltrasonic.app[0].io.destPort = 1002
*.rearLeftUltrasonic.app[0].tagger.type = "RL_ULTRA_DIST"
*.rearRightUltrasonic.app[0].io.destPort = 1003
*.rearRightUltrasonic.app[0].tagger.type = "RR_ULTRA_DIST"

# --- adas ----
*.adas.numApps = 11

# send: wheel speed control
*.adas.app[0..3].typename = "TypedUdpSourceApp"
*.adas.app[0].source.packetNameFormat = "%M->frontLeftWheel:CDT-%c"
*.adas.app[1].source.packetNameFormat = "%M->frontRightWheel:CDT-%c"
*.adas.app[2].source.packetNameFormat = "%M->rearLeftWheel:CDT-%c"
*.adas.app[3].source.packetNameFormat = "%M->rearRightWheel:CDT-%c"
*.adas.app[0..3].source.packetLength = 625B
*.adas.app[0..3].source.productionInterval = 500us
*.adas.app[0].io.destAddress = "frontLeftWheel"
*.adas.app[0].tagger.type = "FL_WHEEL_COMMAND"
*.adas.app[1].io.destAddress = "frontRightWheel"
*.adas.app[1].tagger.type = "FR_WHEEL_COMMAND"
*.adas.app[2].io.destAddress = "rearLeftWheel"
*.adas.app[2].tagger.type = "RL_WHEEL_COMMAND"
*.adas.app[3].io.destAddress = "rearRightWheel"
*.adas.app[3].tagger.type = "RR_WHEEL_COMMAND"
*.adas.app[0..3].io.destPort = 1000

# send: pcm
*.adas.app[4].typename = "TypedUdpSourceApp"
*.adas.app[4].source.packetNameFormat = "%M->pcm:CDT-%c"
#*.adas.app[4].source.packetLength = 4B
*.adas.app[4].source.packetLength = ${N=4..2000 step 128}B
*.adas.app[4].source.productionInterval = 500us
*.adas.app[4].io.destAddress = "pcm"
*.adas.app[4].io.destPort = 1000
*.adas.app[4].tagger.type = "PCM_CONTROL"

# send: mdps
*.adas.app[5].typename = "TypedUdpSourceApp"
*.adas.app[5].source.packetNameFormat = "%M->mdps:CDT-%c"
*.adas.app[5].source.packetLength = 625B
*.adas.app[5].source.productionInterval = 500us
*.adas.app[5].io.destAddress = "mdps"
*.adas.app[5].io.destPort = 1000
*.adas.app[5].tagger.type = "MDPS_CONTROL"

# recv: cameras
*.adas.app[6..9].typename = "TypedUdpSinkApp"
*.adas.app[6].display-name = "FL Camera Feed"
*.adas.app[7].display-name = "FR Camera Feed"
*.adas.app[8].display-name = "RL Camera Feed"
*.adas.app[9].display-name = "RR Camera Feed"
*.adas.app[6].io.localPort = 1000
*.adas.app[7].io.localPort = 1001
*.adas.app[8].io.localPort = 1002
*.adas.app[9].io.localPort = 1003

# recv: v2x
*.adas.app[10].typename = "TypedUdpSinkApp"
*.adas.app[10].display-name = "V2X Data"
*.adas.app[10].io.localPort = 1100

# --- gps --- 
*.gps.numApps = 1

# send: head
*.gps.app[0].typename = "TypedUdpSourceApp"
*.gps.app[0].source.packetNameFormat = "%M->head:BE-%c"
*.gps.app[0].source.packetLength = 64B
*.gps.app[0].source.productionInterval = 100ms
*.gps.app[0].io.destAddress = "head"
*.gps.app[0].io.destPort = 1100
*.gps.app[0].tagger.type = "GPS_UPDATE"

# --- v2x ---
*.v2x.numApps = 1

# send: adas
*.v2x.app[0].typename = "TypedUdpSourceApp"
*.v2x.app[0].source.packetNameFormat = "%M->adas:CDT-%c"
*.v2x.app[0].source.packetLength = 16B
*.v2x.app[0].source.productionInterval = 500us
*.v2x.app[0].io.destAddress = "adas"
*.v2x.app[0].io.destPort = 1100
*.v2x.app[0].tagger.type = "V2X_MESSAGE"

# --- head --- 
*.head.numApps = 7

# send: speakers
*.head.app[0..1].typename = "TypedUdpSourceApp"
*.head.app[0].source.packetNameFormat = "%M->leftSpeakers:ClassA-%c"
*.head.app[1].source.packetNameFormat = "%M->rightSpeakers:ClassA-%c"
*.head.app[0..1].source.packetLength = 11B
*.head.app[0..1].source.productionInterval = 125us
*.head.app[0].io.destAddress = "leftSpeakers"
*.head.app[0].tagger.type = "LEFT_SPEAKER_AUDIO"
*.head.app[1].io.destAddress = "rightSpeakers"
*.head.app[1].tagger.type = "RIGHT_SPEAKER_AUDIO"
*.head.app[0..1].io.destPort = 1000

# recv: ultrasonics
*.head.app[2..5].typename = "TypedUdpSinkApp"
*.head.app[2].display-name = "FL Ultrasonic"
*.head.app[3].display-name = "FR Ultrasonic"
*.head.app[4].display-name = "RL Ultrasonic"
*.head.app[5].display-name = "RR Ultrasonic"
*.head.app[2].io.localPort = 1000
*.head.app[3].io.localPort = 1001
*.head.app[4].io.localPort = 1002
*.head.app[5].io.localPort = 1003

# recv: gps
*.head.app[6].typename = "TypedUdpSinkApp"
*.head.app[6].display-name = "GPS Signal"
*.head.app[6].io.localPort = 1100

# --- wheels ---
*.*Wheel.numApps = 1

# recv: adas
*.*Wheel.app[0].typename = "TypedUdpSinkApp"
*.frontLeftWheel.app[0].display-name = "FL Wheel Control"
*.frontRightWheel.app[0].display-name = "FR Wheel Control"
*.rearLeftWheel.app[0].display-name = "RL Wheel Control"
*.rearRightWheel.app[0].display-name = "RR Wheel Control"
*.*Wheel.app[0].io.localPort = 1000

# --- pcm ---
*.pcm.numApps = 1

# recv: adas
*.pcm.app[0].typename = "TypedUdpSinkApp"
*.pcm.app[0].display-name = "Engine Control"
*.pcm.app[0].io.localPort = 1000

# --- mdps ---
*.mdps.numApps = 1

# recv: adas
*.mdps.app[0].typename = "TypedUdpSinkApp"
*.mdps.app[0].display-name = "Steering Assist"
*.mdps.app[0].io.localPort = 1000

# --- speakers ---
*.*Speakers.numApps = 1

# recv: head
*.*Speakers.app[0].typename = "TypedUdpSinkApp"
*.*Speakers.app[0].display-name = "Audio Data"
*.*Speakers.app[0].io.localPort = 1000

###############################
# Common Ethernet Configuration

# Ethernet links between switches are 1Gbps
*.centralZG.eth[1..4].bitrate = 1Gbps
*.frontLeftZG.eth[0..2].bitrate = 1Gbps
*.frontRightZG.eth[0..2].bitrate = 1Gbps
*.rearLeftZG.eth[0..2].bitrate = 1Gbps
*.rearRightZG.eth[0..2].bitrate = 1Gbps

# Ethernet link to ADAS is 1Gbps
*.centralZG.eth[7].bitrate = 1Gbps
*.adas.eth[0].bitrate = 1Gbps

# other Ethernet links are 100Mbps
*.*.eth[*].bitrate = 100Mbps

##########################
# Visualizer Configuration

# enable multiple canvas visualizers
*.visualizer.typename = "IntegratedMultiCanvasVisualizer"

# data link activity visualization for multicast packets
*.visualizer.dataLinkVisualizer[0].displayLinks = true
*.visualizer.dataLinkVisualizer[0].activityLevel = "protocol"
*.visualizer.dataLinkVisualizer[0].packetFilter = "*Camera*"
*.visualizer.dataLinkVisualizer[0].lineColor = "blue4"
*.visualizer.dataLinkVisualizer[0].labelColor = "blue4"

# network route activity visualization
*.visualizer.numNetworkRouteVisualizers = 4
*.visualizer.networkRouteVisualizer[*].displayRoutes = true
*.visualizer.networkRouteVisualizer[0].packetFilter = "*Wheel*"
*.visualizer.networkRouteVisualizer[0].lineColor = "red4"
*.visualizer.networkRouteVisualizer[1].packetFilter = "*Ultrasonic*"
*.visualizer.networkRouteVisualizer[1].lineColor = "blue4"
*.visualizer.networkRouteVisualizer[2].packetFilter = "*speakers*"
*.visualizer.networkRouteVisualizer[2].lineColor = "green4"
*.visualizer.networkRouteVisualizer[3].packetFilter = "*mdps*"
*.visualizer.networkRouteVisualizer[3].lineColor = "gray"

*.visualizer.interfaceTableVisualizer[0].displayInterfaceTables = true

[Config TimeSensitiveNetworkingBase]
#abstract-config = true (requires omnet 7)
description = "Using Time-Sensitive Networking features"

#################################
# Network Node Type Configuration

# use TSN switches
*.*ZG.typename = "TsnSwitch"

# use TSN devices
*.*Cam.typename = "TsnDevice"
*.*Ultrasonic.typename = "TsnDevice"
*.*Wheel.typename = "TsnDevice"
*.pcm.typename = "TsnDevice"
*.head.typename = "TsnDevice"
*.mdps.typename = "TsnDevice"
*.adas.typename = "TsnDevice"
*.gps.typename = "TsnDevice"
*.v2x.typename = "TsnDevice"
*.*Speakers.typename = "TsnDevice"

# use TSN clock
*.masterClock.typename = "TsnClock"

#####################
# Clock Configuration

# clocks have a random constant drift in all network nodes
*.*.clock.oscillator.driftRate = uniform(-100ppm, 100ppm)

# application traffic sources use the local clock of the network node
*.*.app[*].source.clockModule = "^.^.clock"

# periodic gates in all traffic shapers use the local clock of the network node
*.*.eth[*].macLayer.queue.transmissionGate[*].clockModule = "^.^.^.^.clock"

####################################
# Time Synchronization Configuration

# enable time synchronization in all network nodes
*.*.hasTimeSynchronization = true

# time synchronization starts from the master clock
*.masterClock.gptp.masterPorts = ["eth0"]

# all Ethernet switches act as a gPTP bridge
# default slave port is eth0
*.centralZG.gptp.masterPorts = ["eth1", "eth2", "eth3", "eth4", "eth5", "eth6", "eth7", "eth8", "eth9", "eth10"]
*.frontLeftZG.gptp.masterPorts = ["eth3", "eth4", "eth5"]
*.frontRightZG.gptp.masterPorts = ["eth3", "eth4", "eth5"]
*.rearLeftZG.gptp.masterPorts = ["eth3", "eth4", "eth5"]
*.rearRightZG.gptp.masterPorts = ["eth3", "eth4", "eth5"]

#############################
# Stream Coding Configuration

# enable outgoing TSN streams
*.*.hasOutgoingStreams = true

###############################
# Traffic Shaping Configuration

# enable egress traffic shaping
*.*ZG.hasEgressTrafficShaping = true

####################################
# Per-stream Filtering Configuration

# enable per-stream filtering
*.*ZG.hasIngressTrafficFiltering = true

#####################################
# Cut-through Switching Configuration

# enable cut-through switching
#*.frontSwitch.hasCutthroughSwitching = true
#*.frontSwitch.hasCutthroughSwitching = true
#*.frontSwitch.eth[0].typename = "LayeredEthernetInterface"
#*.frontSwitch.eth[0].phyLayer.typename = "EthernetStreamingPhyLayer"

##################################
# Frame Preemption Configuration

# enable frame preemption
#*.*Switch.hasFramePreemption = true
#*.*Switch.eth[*].macLayer.typename = "EthernetPreemptingMacLayer"
#*.*Switch.eth[*].phyLayer.typename = "EthernetPreemptingPhyLayer"

##########################
# Visualizer Configuration

# enable multiple canvas visualizers
*.visualizer.typename = "IntegratedMultiCanvasVisualizer"

# display time synchronization packets
*.visualizer.numDataLinkVisualizers = 2
*.visualizer.dataLinkVisualizer[1].displayLinks = true
*.visualizer.dataLinkVisualizer[1].activityLevel = "protocol"
*.visualizer.dataLinkVisualizer[1].packetFilter = "*Gptp*"
*.visualizer.dataLinkVisualizer[1].lineColor = "black"
*.visualizer.dataLinkVisualizer[1].labelColor = "black"

[Config AutomaticTsn]
description = "Using automatic Time-Sensitive Networking configuration"
extends = TimeSensitiveNetworkingBase

*.*.hasOutgoingStreams = true
*.*ZG.hasIncomingStreams = true

*.*.bridging.streamIdentifier.identifier.mapping = [{stream: "CDT", packetFilter: expr(has(udp) && name =~ "*CDT*")},
						    						{stream: "ClassA", packetFilter: expr(has(udp) && name =~ "*ClassA*")},
						    						{stream: "ClassB", packetFilter: expr(has(udp) && name =~ "*ClassB*")},
						    						{stream: "BE", packetFilter: expr(has(udp) && name =~ "*BE")}]
*.*.bridging.streamCoder.encoder.mapping = [{stream: "CDT", pcp: 7},
					    					{stream: "ClassA", pcp: 6},
					    					{stream: "ClassB", pcp: 5},
					    					{stream: "BE", pcp: 0}]

*.*ZG.bridging.streamCoder.decoder.mapping = [{pcp: 7, stream: "CDT"},
											  {pcp: 6, stream: "ClassA"},
											  {pcp: 5, stream: "ClassB"},
											  {pcp: 4, stream: "BE"}]

#################################
# Frame Replication Configuration

# enabled stream redundancy
*.*.hasStreamRedundancy = true

# gate scheduling
*.gateScheduleConfigurator.typename = "AlwaysOpenGateScheduleConfigurator"
*.gateScheduleConfigurator.gateCycleDuration = 500us

# stream redundancy configurator
*.streamRedundancyConfigurator.typename = "StreamRedundancyConfigurator"

# TSN configuration
*.failureProtectionConfigurator.typename = "FailureProtectionConfigurator"
# 54B = 8B (UDP) + 20B (IP) + 14B (ETH MAC) + 4B (ETH FCS) + 8B (ETH PHY)
# 64B = 8B (UDP) + 20B (IP) + 4B (802.1R) + 6B (802.1Q) + 14B (ETH MAC) + 4B (ETH FCS) + 8B (ETH PHY)

#*.failureProtectionConfigurator.configuration = [# single link failure protection redundancy for CDT traffic
#                                   {name: "frontLeftWheel", application: "app[0]",
#                                    source: "frontLeftWheel", destination: "engineActuator",
#                                    pcp: 6, gateIndex: 6, packetFilter: "*->*",
#                                    packetLength: 175B + 64B, packetInterval: 500us, maxLatency: 100us,
#                                    linkFailureProtection: [{any: 1, of: "not *->engineActuator and not frontLeftWheel->*"}]},
#                                   {name: "frontRightWheel", application: "app[0]",
#                                    source: "frontRightWheel", destination: "engineActuator",
#                                    pcp: 6, gateIndex: 6, packetFilter: "*->*",
#                                    packetLength: 175B + 64B, packetInterval: 500us, maxLatency: 100us,
#                                    linkFailureProtection: [{any: 1, of: "not *->engineActuator and not frontRightWheel->*"}]},
#                                   {name: "rearLeftWheel", application: "app[0]",
#                                    source: "rearLeftWheel", destination: "engineActuator",
#                                    pcp: 6, gateIndex: 6, packetFilter: "*->*",
#                                    packetLength: 175B + 64B, packetInterval: 500us, maxLatency: 100us,
#                                    linkFailureProtection: [{any: 1, of: "not *->engineActuator and not rearLeftWheel->*"}]},
#                                   {name: "rearRightWheel", application: "app[0]",
#                                    source: "rearRightWheel", destination: "engineActuator",
#                                    pcp: 6, gateIndex: 6, packetFilter: "*->*",
#                                    packetLength: 175B + 64B, packetInterval: 500us, maxLatency: 100us,
#                                    linkFailureProtection: [{any: 1, of: "not *->engineActuator and not rearRightWheel->*"}]},
#                                   {name: "steering", application: "app[0]",
#                                    source: "steering", destination: "engineActuator",
#                                    pcp: 6, gateIndex: 6, packetFilter: "*->*",
#                                    packetLength: 175B + 64B, packetInterval: 500us, maxLatency: 100us,
#                                    linkFailureProtection: [{any: 1, of: "not *->engineActuator and not steering->*"}]},
#                                   # AVB class A streams
# # TODO these are not needed because we don't allocate slots for these streams?
#                                   {name: "frontLeftCamera", application: "app[0]", destinationAddress: "01:00:5E:00:00:2A",
#                                    source: "frontLeftCamera", destination: "hud or obu",
#                                    pcp: 5, gateIndex: 5, packetFilter: "*->*",
#                                    packetLength: 325B + 54B, packetInterval: 125us, maxLatency: 2ms},
#                                   {name: "frontRightCamera", application: "app[0]", destinationAddress: "01:00:5E:00:00:2A",
#                                    source: "frontRightCamera", destination: "hud or obu",
#                                    pcp: 5, gateIndex: 5, packetFilter: "*->*",
#                                    packetLength: 325B + 54B, packetInterval: 125us, maxLatency: 2ms},
#                                   {name: "rearLeftCamera", application: "app[0]", destinationAddress: "01:00:5E:00:00:2A",
#                                    source: "rearLeftCamera", destination: "hud or obu",
#                                    pcp: 5, gateIndex: 5, packetFilter: "*->*",
#                                    packetLength: 325B + 54B, packetInterval: 125us, maxLatency: 2ms},
#                                   {name: "rearRightCamera", application: "app[0]", destinationAddress: "01:00:5E:00:00:2A",
#                                    source: "rearRightCamera", destination: "hud or obu",
#                                    pcp: 5, gateIndex: 5, packetFilter: "*->*",
#                                    packetLength: 325B + 54B, packetInterval: 125us, maxLatency: 2ms},
#                                   {name: "lidar", application: "app[0]",
#                                    source: "lidar", destination: "hud",
#                                    pcp: 5, gateIndex: 5, packetFilter: "*->*",
#                                    packetLength: 325B + 54B, packetInterval: 125us, maxLatency: 2ms},
#                                   # AVB class B streams
#                                   {name: "obu", application: "app[0]",
#                                    source: "obu", destination: "rearDisplay",
#                                    pcp: 4, gateIndex: 4, packetFilter: "*->*",
#                                    packetLength: 325B + 54B, packetInterval: 250us, maxLatency: 50ms},
#                                   {name: "hud", application: "app[0]",
#                                    source: "hud", destination: "rearDisplay",
#                                    pcp: 4, gateIndex: 4, packetFilter: "*->*",
#                                    packetLength: 325B + 54B, packetInterval: 250us, maxLatency: 50ms},
#                                   # best effort streams
#                                   {name: "bestEffort", application: "app[0]",
#                                    source: "obu", destination: "hud",
#                                    pcp: 0, gateIndex: 1, packetFilter: "*->*",
#                                    packetLength: 325B + 54B, packetInterval: 125us}]

##########################
# Visualizer Configuration

# gate scheduling visualization
*.visualizer.gateScheduleVisualizer[0].displayGateSchedules = true
*.visualizer.gateScheduleVisualizer[0].displayDuration = 100us
*.visualizer.gateScheduleVisualizer[0].gateFilter = "**.eth[0].queue.transmissionGate[*]"
*.visualizer.gateScheduleVisualizer[0].height = 16

# Stream redundancy visualizer
*.visualizer.numStreamRedundancyConfigurationVisualizers = 1
*.visualizer.streamRedundancyConfigurationVisualizer[0].displayTrees = true
*.visualizer.streamRedundancyConfigurationVisualizer[0].streamFilter = "rearRightWheel"
*.visualizer.streamRedundancyConfigurationVisualizer[0].lineColor = "green4"

# TSN visualizer
*.visualizer.numFailureProtectionConfigurationVisualizers = 1
*.visualizer.failureProtectionConfigurationVisualizer[0].displayTrees = true
*.visualizer.failureProtectionConfigurationVisualizer[0].streamFilter = "rearRightWheel"
*.visualizer.failureProtectionConfigurationVisualizer[0].lineStyle = "dashed"

[Config ActualTsn]
description = "Using gate scheduling"
extends = AutomaticTsn

*.*.hasEgressTrafficShaping = true
*.*.eth[*].macLayer.queue.numTrafficClasses = 4
*.*.eth[*].macLayer.queue.queue[0].display-name = "BE"
*.*.eth[*].macLayer.queue.queue[1].display-name = "ClassB"
*.*.eth[*].macLayer.queue.queue[2].display-name = "ClassA"
*.*.eth[*].macLayer.queue.queue[3].display-name = "CDT"

*.gateScheduleConfigurator.typename = "EagerGateScheduleConfigurator"
*.gateScheduleConfigurator.gateCycleDuration = 500us

# 58B = 8B (UDP) + 20B (IP) + 4B (802.1Q TAG) + 14B (ETH MAC) + 4B (ETH FCS) + 8B (ETH PHY)
*.gateScheduleConfigurator.configuration = 
	[{pcp: 5, gateIndex: 1, application: "app[0]", source: "frontLeftCam",
	  destination: "adas", packetLength: 1250B + 58B, packetInterval: 250us,
	  maxLatency: 33ms},
	 {pcp: 5, gateIndex: 1, application: "app[0]", source: "frontRightCam",
	  destination: "adas", packetLength: 1250B + 58B, packetInterval: 250us,
	  maxLatency: 33ms},
	 {pcp: 5, gateIndex: 1, application: "app[0]", source: "rearLeftCam",
	  destination: "adas", packetLength: 1250B + 58B, packetInterval: 250us,
	  maxLatency: 33ms},
	 {pcp: 5, gateIndex: 1, application: "app[0]", source: "rearRightCam",
	  destination: "adas", packetLength: 1250B + 58B, packetInterval: 250us,
	  maxLatency: 33ms},
	 {pcp: 5, gateIndex: 1, application: "app[0]", source: "frontLeftUltrasonic",
	  destination: "head", packetLength: 8B + 58B, packetInterval: 250us,
	  maxLatency: 20ms},
	 {pcp: 5, gateIndex: 1, application: "app[0]", source: "frontRightUltrasonic",
	  destination: "head", packetLength: 8B + 58B, packetInterval: 250us,
	  maxLatency: 20ms},
	 {pcp: 5, gateIndex: 1, application: "app[0]", source: "rearLeftUltrasonic",
	  destination: "head", packetLength: 8B + 58B, packetInterval: 250us,
	  maxLatency: 20ms},
	 {pcp: 5, gateIndex: 1, application: "app[0]", source: "rearRightUltrasonic",
	  destination: "head", packetLength: 8B + 58B, packetInterval: 250us,
	  maxLatency: 20ms},
	 {pcp: 7, gateIndex: 3, application: "app[0]", source: "adas",
	  destination: "frontLeftWheel", packetLength: 625B + 58B, packetInterval: 500us,
	  maxLatency: 100us},
	 {pcp: 7, gateIndex: 3, application: "app[1]", source: "adas",
	  destination: "frontRightWheel", packetLength: 625B + 58B, packetInterval: 500us,
	  maxLatency: 100us},
	 {pcp: 7, gateIndex: 3, application: "app[2]", source: "adas",
	  destination: "rearLeftWheel", packetLength: 625B + 58B, packetInterval: 500us,
	  maxLatency: 100us},
	 {pcp: 7, gateIndex: 3, application: "app[3]", source: "adas",
	  destination: "rearRightWheel", packetLength: 625B + 58B, packetInterval: 500us,
	  maxLatency: 100us},
	 {pcp: 7, gateIndex: 3, application: "app[4]", source: "adas",
	  destination: "pcm", packetLength: 4B + 58B, packetInterval: 500us,
	  maxLatency: 100us},
	 {pcp: 7, gateIndex: 3, application: "app[5]", source: "adas",
	  destination: "mdps", packetLength: 625B + 58B, packetInterval: 500us,
	  maxLatency: 100us},
	 {pcp: 7, gateIndex: 3, application: "app[0]", source: "v2x",
	  destination: "adas", packetLength: 16B + 58B, packetInterval: 500us,
	  maxLatency: 100us},
	 {pcp: 6, gateIndex: 2, application: "app[0]", source: "head",
	  destination: "leftSpeakers", packetLength: 11B + 58B, packetInterval: 125us,
	  maxLatency: 10ms},
	 {pcp: 6, gateIndex: 2, application: "app[1]", source: "head",
	  destination: "rightSpeakers", packetLength: 11B + 58B, packetInterval: 125us,
	  maxLatency: 10ms}]

#	 {pcp: 0, gateIndex: 0, application: "app[0]", source: "gps",
#	  destination: "head", packetLength: 64B + 58B, packetInterval: 100ms,
#	  maxLatency: 100ms},

*.visualizer.gateScheduleVisualizer.displayGateSchedules = true
*.visualizer.gateScheduleVisualizer.displayDuration = 100us
#*.visualizer.gateScheduleVisualizer.gateFilter = "*.switch1.eth[2].** or *.switch2.eth[0].**.transmissionGate[0] or *.switch2.eth[1].**.transmissionGate[1]"
*.visualizer.gateScheduleVisualizer.height = 16


[Config OurMethod]
description = "TSN configuration showing our method with firewalls"
extends = AutomaticTsn

*.*ZG.bridging.typename = "FirewallBridgingLayer"

*.centralZG.bridging.firewallLayer.*.rules = {
		"eth5": { in: [ ], out: [ "V2X_MESSAGE" ] },  		# V2X
		"eth6": { in: [ ], out: [ "GPS_UPDATE" ] },  		# GPS
		"eth7": { in: [										# ADAS
						"FL_CAM_IMAGE",
						"FR_CAM_IMAGE", 
						"RL_CAM_IMAGE",
						"RR_CAM_IMAGE",
						"V2X_MESSAGE"
					  ], 
				  out: [
						"FL_WHEEL_COMMAND", 
						"FR_WHEEL_COMMAND", 
						"RL_WHEEL_COMMAND", 
						"RR_WHEEL_COMMAND", 
						"PCM_CONTROL", 
						"MDPS_CONTROL",
				 	   ] 
				},
		"eth8": { in: [ "MDPS_CONTROL" ], out: [ ] }, 		# MDPS
		"eth9": { in: [										# head
						"FL_ULTRA_DIST",
						"FR_ULTRA_DIST",
						"RL_ULTRA_DIST",
						"RR_ULTRA_DIST",
						"GPS_UPDATE"
					  ],
				  out: [
						"LEFT_SPEAKER_AUDIO",
						"RIGHT_SPEAKER_AUDIO"
					   ]
				},
		"eth10": { in: [ "PCM_CONTROL" ], out: [ ] }		# PCM						
	}
*.frontLeftZG.bridging.firewallLayer.*.rules = {
		"eth3": { in: [ ], out: [ "FL_ULTRA_DIST" ] },  		# FL ultrasonic
		"eth4": { in: [ "FL_WHEEL_COMMAND" ], out: [ ] },  		# FL wheel
		"eth5": { in: [ ], out: [ "FL_CAM_IMAGE" ] },  			# FL camera
	}
*.frontRightZG.bridging.firewallLayer.*.rules = {
		"eth3": { in: [ ], out: [ "FR_ULTRA_DIST" ] },  		# FR ultrasonic
		"eth4": { in: [ "FR_WHEEL_COMMAND" ], out: [ ] },  		# FR wheel
		"eth5": { in: [ ], out: [ "FR_CAM_IMAGE" ] },  			# FR camera
	}
*.rearLeftZG.bridging.firewallLayer.*.rules = {
		"eth3": { in: [ ], out: [ "RL_ULTRA_DIST" ] },  		# RL ultrasonic
		"eth4": { in: [ "RL_WHEEL_COMMAND" ], out: [ ] },  		# RL wheel
		"eth5": { in: [ ], out: [ "RL_CAM_IMAGE" ] },  			# RL camera
		"eth6": { in: [ "LEFT_SPEAKER_AUDIO" ], out: [ ] },  	# left speakers
	}
*.rearRightZG.bridging.firewallLayer.*.rules = {
		"eth3": { in: [ ], out: [ "RR_ULTRA_DIST" ] },  		# RR ultrasonic
		"eth4": { in: [ "RR_WHEEL_COMMAND" ], out: [ ] },  		# RR wheel
		"eth5": { in: [ ], out: [ "RR_CAM_IMAGE" ] },  			# RR camera
		"eth6": { in: [ "RIGHT_SPEAKER_AUDIO" ], out: [ ] },  	# right speakers
	}

*.*ZG.bridging.firewallProcessingDelayLayer.*.delay = 100ns

[Config Cryptography]
description = "Configuration where each sending node does some cryptographic operation to add a MAC / signature, and then each receiving node does some operation to verify it."
extends = AutomaticTsn
#abstract-config = true (requires omnet 7)

**.app[*].applyingCryptography = true
**.app[*].crypto.typename = "CryptoLayer"

[Config SipHash]
description = "Cryptography configuration using SipHash"
extends = Cryptography

**.app[*].crypto.**.trailerLength = 8  # 8 bytes = 64 bit ICV
**.app[*].crypto.**.delay = 20us  # from linear regression
**.app[*].crypto.**.bitrate = 2698795bps  # = 1/0.371us, from linear regression. Refers to slope of latency, not necessarily throughput 

[Config ChaChaPoly]
description = "Cryptography configuration using ChaCha20-Poly1305"
extends = Cryptography

**.app[*].crypto.**.trailerLength = 8  # 16 bytes = 128 bit ICV
**.app[*].crypto.**.delay = 116.4us  # from linear regression
**.app[*].crypto.**.bitrate = 4705882bps  # = 1/0.2125us, from linear regression. Refers to slope of latency, not necessarily throughput 
